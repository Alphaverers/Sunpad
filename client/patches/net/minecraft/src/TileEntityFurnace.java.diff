--- TileEntityFurnace.java
+++ TileEntityFurnace.java
@@ -1,4 +1,9 @@
 package net.minecraft.src;
 
+import java.util.Optional;
+
+import net.buj.rml.Game;
+import net.minecraft.client.rmlcompat.Items;
+
 public class TileEntityFurnace extends TileEntity implements IInventory {
     private ItemStack[] furnaceItemStacks;
@@ -68,5 +73,5 @@
         this.furnaceBurnTime = compoundTag.getShort("BurnTime");
         this.furnaceCookTime = compoundTag.getShort("CookTime");
-        this.currentItemBurnTime = this.getItemBurnTime(this.furnaceItemStacks[1]);
+        this.currentItemBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
     }
     
@@ -116,5 +121,5 @@
         }
         if (this.furnaceBurnTime == 0 && this.canSmelt()) {
-            final int itemBurnTime = this.getItemBurnTime(this.furnaceItemStacks[1]);
+            final int itemBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
             this.furnaceBurnTime = itemBurnTime;
             this.currentItemBurnTime = itemBurnTime;
@@ -122,7 +127,6 @@
                 b2 = true;
                 if (this.furnaceItemStacks[1] != null) {
-                    final ItemStack itemStack2;
-                    final ItemStack itemStack = itemStack2 = this.furnaceItemStacks[1];
-                    --itemStack2.stackSize;
+                    final ItemStack itemStack = this.furnaceItemStacks[1];
+                    --itemStack.stackSize;
                     if (this.furnaceItemStacks[1].stackSize == 0) {
                         this.furnaceItemStacks[1] = null;
@@ -156,5 +160,18 @@
         }
         final int cookedItem = this.getCookedItem(this.furnaceItemStacks[0].getItem().shiftedIndex);
-        return cookedItem >= 0 && (this.furnaceItemStacks[2] == null || (this.furnaceItemStacks[2].itemID == cookedItem && ((this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize()) || this.furnaceItemStacks[2].stackSize < Item.ITEMS_LIST[cookedItem].getItemStackLimit())));
+
+        // New
+
+        Optional<Items.Item> itemOption = Game.items.byId(cookedItem);
+        if (itemOption.isEmpty()) return false;
+        Items.Item item = itemOption.get();
+
+        if (this.furnaceItemStacks[2] == null) return true;
+
+        if (this.furnaceItemStacks[2].stackSize < item.getItemStackLimit()) return true;
+        if (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit()) return true;
+        if (this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize()) return true;
+
+        return false;
     }
     
@@ -168,11 +185,7 @@
         }
         else if (this.furnaceItemStacks[2].itemID == cookedItem) {
-            final ItemStack itemStack3;
-            final ItemStack itemStack = itemStack3 = this.furnaceItemStacks[2];
-            ++itemStack3.stackSize;
+            ++this.furnaceItemStacks[2].stackSize;
         }
-        final ItemStack itemStack4;
-        final ItemStack itemStack2 = itemStack4 = this.furnaceItemStacks[0];
-        --itemStack4.stackSize;
+        --this.furnaceItemStacks[0].stackSize;
         if (this.furnaceItemStacks[0].stackSize <= 0) {
             this.furnaceItemStacks[0] = null;
@@ -223,5 +236,5 @@
     }
     
-    private int getItemBurnTime(final ItemStack itemStack) {
+    public static int getItemBurnTime(final ItemStack itemStack) {
         if (itemStack == null) {
             return 0;
