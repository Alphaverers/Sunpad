--- Minecraft.java
+++ Minecraft.java
@@ -2,52 +2,25 @@
 
 import java.awt.event.WindowListener;
-import net.minecraft.src.GameWindowListener;
-import net.minecraft.src.MinecraftImpl;
+
+import net.buj.rml.Environment;
+import net.buj.rml.Game;
+import net.buj.rml.RosepadModLoader;
+import net.buj.rml.annotations.Nullable;
+import net.minecraft.client.rmlcompat.Items;
+import net.minecraft.src.*;
+
 import java.awt.Dimension;
 import java.awt.LayoutManager;
 import java.awt.BorderLayout;
 import java.awt.Frame;
-import net.minecraft.src.MovementInputFromOptions;
-import net.minecraft.src.IProgressUpdate;
-import net.minecraft.src.MathHelper;
-import net.minecraft.src.Entity;
-import net.minecraft.src.GuiChat;
-import net.minecraft.src.IInventory;
-import net.minecraft.src.GuiInventory;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.EntityPlayer;
-import net.minecraft.src.Block;
-import net.minecraft.src.PlayerControllerCreative;
-import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.MinecraftError;
-import net.minecraft.src.WorldRenderer;
-import net.minecraft.src.InputHandler;
-import net.minecraft.src.EntityLiving;
-import net.minecraft.src.MinecraftException;
-import net.minecraft.src.GuiConflictWarning;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.GLAllocation;
+
 import org.lwjgl.util.glu.GLU;
-import net.minecraft.src.GuiGameOver;
-import net.minecraft.src.GuiErrorScreen;
-import net.minecraft.src.EnumOS;
-import net.minecraft.src.OSMap;
-import net.minecraft.src.Tessellator;
-import net.minecraft.src.ScaledResolution;
+
 import java.awt.Graphics;
-import net.minecraft.src.GuiMainMenu;
-import net.minecraft.src.GuiConnecting;
-import net.minecraft.src.TextureFlamesFX;
-import net.minecraft.src.TextureLavaFlowFX;
-import net.minecraft.src.TextureWaterFlowFX;
-import net.minecraft.src.TextureCompassFX;
-import net.minecraft.src.TextureFX;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.input.Keyboard;
-import net.minecraft.src.ItemRenderer;
-import net.minecraft.src.RenderManager;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.opengl.PixelFormat;
@@ -55,33 +28,9 @@
 import org.lwjgl.opengl.Display;
 import java.awt.Color;
-import net.minecraft.src.UnexpectedThrowable;
-import net.minecraft.src.ThreadSleepForever;
 import java.awt.Component;
-import net.minecraft.src.TextureLavaFX;
-import net.minecraft.src.TextureWaterFX;
 import java.io.File;
-import net.minecraft.src.MouseHelper;
-import net.minecraft.src.SoundManager;
-import net.minecraft.src.GameSettings;
-import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.ModelBiped;
-import net.minecraft.src.GuiIngame;
-import net.minecraft.src.ThreadDownloadResources;
-import net.minecraft.src.EntityRenderer;
-import net.minecraft.src.LoadingScreenRenderer;
-import net.minecraft.src.GuiScreen;
-import net.minecraft.src.FontRenderer;
-import net.minecraft.src.RenderEngine;
 import java.awt.Canvas;
-import net.minecraft.src.Session;
-import net.minecraft.src.EffectRenderer;
-import net.minecraft.src.EntityPlayerSP;
-import net.minecraft.src.RenderGlobal;
-import net.minecraft.src.World;
-import net.minecraft.src.Timer;
-import net.minecraft.src.OpenGlCapsChecker;
-import net.minecraft.src.PlayerController;
 
-public abstract class Minecraft implements Runnable {
+public abstract class Minecraft implements Runnable, net.buj.rml.MinecraftImpl {
     public PlayerController playerController;
     private boolean fullscreen;
@@ -120,4 +69,5 @@
     public MouseHelper mouseHelper;
     public File mcDataDir;
+    public RosepadModLoader modLoader;
     public static long[] frameTimes;
     public static int numRecordedFrameTimes;
@@ -135,5 +85,27 @@
     long systemTime;
     private int joinPlayerCounter;
+
+    public static Minecraft INSTANCE;
     
+    public int[] getVersion() {
+    	return new int[] { 1, 1, 1, 0 };
+    }
+    
+    public String getVersionTag() {
+    	return "dev";
+    }
+    
+    public String getVersionString() {
+    	int[] version = getVersion();
+    	StringBuilder str = new StringBuilder();
+    	for (int i = 0; i < version.length; i++) {
+    		if (i != 0) str.append(".");
+    		str.append(version[i]);
+    	}
+    	String tag = getVersionTag();
+    	if (tag.length() > 0) str.append("-").append(tag);
+    	return str.toString();
+    }
+    
     static {
         Minecraft.frameTimes = new long[512];
@@ -143,4 +115,18 @@
     
     public Minecraft(final Component component, final Canvas canvas, final MinecraftApplet minecraftApplet, final int width, final int height, final boolean fullscreen) {
+        Game.minecraft = this;
+        Game.environment = Environment.CLIENT;
+
+        Game.items = new Items();
+
+        Material.initAll();
+        Block.initAll();
+        Item.initAll();
+        Packet.initAll();
+        Session.initAll();
+        TileEntity.initAll();
+
+        INSTANCE = this;
+
         this.fullscreen = false;
         this.timer = new Timer(20.0f);
@@ -178,4 +164,5 @@
         this.displayHeight = height;
         this.fullscreen = fullscreen;
+        this.modLoader = new RosepadModLoader();
     }
     
@@ -211,5 +198,5 @@
             Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
         }
-        Display.setTitle("Minecraft Minecraft Alpha v1.1.0");
+        Display.setTitle(getVersionString());
         try {
             PixelFormat pixelformat = new PixelFormat();
@@ -222,5 +209,5 @@
                 Thread.sleep(1000L);
             }
-            catch (InterruptedException ex3) {}
+            catch (InterruptedException ignore) {}
             Display.create();
         }
@@ -233,5 +220,5 @@
         Keyboard.create();
         Mouse.create();
-        this.mouseHelper = new MouseHelper((Component)this.mcCanvas);
+        this.mouseHelper = new MouseHelper(this.mcCanvas);
         try {
             Controllers.create();
@@ -268,7 +255,12 @@
             (this.downloadResourcesThread = new ThreadDownloadResources(this.mcDataDir, this)).start();
         }
-        catch (Exception ex4) {}
+        catch (Exception ignored) {}
         this.checkGLError("Post startup");
         this.ingameGUI = new GuiIngame(this);
+        {
+            File file = new File(getMinecraftDir(), "mods");
+            if (!file.exists() && file.mkdir()) doNothing();
+            this.modLoader.load(Environment.CLIENT, file);
+        }
         if (this.serverName != null) {
             this.displayGuiScreen(new GuiConnecting(this, this.serverName, this.serverPort));
@@ -280,5 +272,5 @@
     
     private void loadScreen() throws LWJGLException {
-        final ScaledResolution scaledResolution = new ScaledResolution(this.displayWidth, this.displayHeight);
+        final ScaledResolution scaledResolution = new ScaledResolution(this.displayWidth, this.displayHeight, true);
         final int scaledWidth = scaledResolution.getScaledWidth();
         final int scaledHeight = scaledResolution.getScaledHeight();
@@ -304,6 +296,4 @@
         instance.addVertexWithUV(0.0, 0.0, 0.0, 0.0, 0.0);
         instance.draw();
-        final int integer5 = 256;
-        final int integer6 = 256;
         GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
         instance.setColorOpaque_I(16777215);
@@ -317,6 +307,4 @@
     
     public void scaledTessellator(final int integer1, final int integer2, final int integer3, final int integer4, final int integer5, final int integer6) {
-        final float n = 0.00390625f;
-        final float n2 = 0.00390625f;
         final Tessellator instance = Tessellator.instance;
         instance.startDrawingQuads();
@@ -341,5 +329,5 @@
             case 1:
             case 2: {
-                file = new File(property, String.valueOf('.') + appDirName + '/');
+                file = new File(property, '.' + appDirName + '/');
                 break;
             }
@@ -347,12 +335,12 @@
                 final String getenv = System.getenv("APPDATA");
                 if (getenv != null) {
-                    file = new File(getenv, new StringBuilder(".").append(appDirName).append('/').toString());
+                    file = new File(getenv, "." + appDirName + '/');
                     break;
                 }
-                file = new File(property, String.valueOf('.') + appDirName + '/');
+                file = new File(property, '.' + appDirName + '/');
                 break;
             }
             case 4: {
-                file = new File(property, new StringBuilder("Library/Application Support/").append(appDirName).toString());
+                file = new File(property, "Library/Application Support/" + appDirName);
                 break;
             }
@@ -363,5 +351,5 @@
         }
         if (!file.exists() && !file.mkdirs()) {
-            throw new RuntimeException(new StringBuilder().append("The working directory could not be created: ").append(file).toString());
+            throw new RuntimeException("The working directory could not be created: " + file);
         }
         return file;
@@ -407,5 +395,5 @@
             this.setIngameNotInFocus();
             final ScaledResolution scaledResolution = new ScaledResolution(this.displayWidth, this.displayHeight);
-            guiScreen.setWorldAndResolution(this, scaledResolution.getScaledWidth(), scaledResolution.getScaledHeight());
+            guiScreen.setWorldAndResolution(this, scaledResolution);
             this.skipRenderWorld = false;
         }
@@ -420,6 +408,6 @@
             final String gluErrorString = GLU.gluErrorString(glGetError);
             System.out.println("########## GL ERROR ##########");
-            System.out.println(new StringBuilder("@ ").append(location).toString());
-            System.out.println(new StringBuilder().append(glGetError).append(": ").append(gluErrorString).toString());
+            System.out.println("@ " + location);
+            System.out.println(glGetError + ": " + gluErrorString);
             System.exit(0);
         }
@@ -435,5 +423,5 @@
             }
         }
-        catch (Exception ex) {}
+        catch (Exception ignored) {}
         try {
             System.out.println("Stopping!");
@@ -442,5 +430,5 @@
                 GLAllocation.deleteTexturesAndDisplayLists();
             }
-            catch (Exception ex2) {}
+            catch (Exception ignored) {}
             this.sndManager.closeMinecraft();
             Mouse.destroy();
@@ -498,5 +486,5 @@
                 GL11.glEnable(3553);
                 if (this.theWorld != null) {
-                    while (this.theWorld.updatingLighting()) {}
+                    while (this.theWorld.updatingLighting()) doNothing();
                 }
                 if (!this.skipRenderWorld) {
@@ -538,5 +526,5 @@
                 this.isGamePaused = (!this.isMultiplayerWorld() && this.currentScreen != null && this.currentScreen.doesGuiPauseGame());
                 while (System.currentTimeMillis() >= currentTimeMillis + 1000L) {
-                    this.debug = new StringBuilder().append(n).append(" fps, ").append(WorldRenderer.chunksUpdated).append(" chunk updates").toString();
+                    this.debug = (n > 100 ? "§a" : n >= 60 ? "§e" : "§c") + n + "§r fps, §b" + WorldRenderer.chunksUpdated + "§r chunk updates";
                     WorldRenderer.chunksUpdated = 0;
                     currentTimeMillis += 1000L;
@@ -545,5 +533,7 @@
             }
         }
-        catch (MinecraftError minecraftError) {}
+        catch (MinecraftError e) {
+            e.printStackTrace();
+        }
         catch (Throwable throwable2) {
             this.theWorld = null;
@@ -601,5 +591,5 @@
             n4 = n4 * n4 / 255;
             instance.setColorOpaque_I(-16777216 + n4 + n3 * 256 + n2 * 65536);
-            instance.addVertex(j + 0.5f, this.displayHeight - Minecraft.frameTimes[j] / 200000L + 0.5f, 0.0);
+            instance.addVertex(j + 0.5f, (double) (this.displayHeight - Minecraft.frameTimes[j] / 200000L) + 0.5f, 0.0);
             instance.addVertex(j + 0.5f, this.displayHeight + 0.5f, 0.0);
         }
@@ -716,5 +706,5 @@
                 final int n = currentItem2.stackSize;
                 final ItemStack useItemRightClick = currentItem2.useItemRightClick(this.theWorld, this.thePlayer);
-                if (useItemRightClick != currentItem2 || (useItemRightClick != null && useItemRightClick.stackSize != n)) {
+                if (useItemRightClick != currentItem2 || useItemRightClick.stackSize != n) {
                     this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = useItemRightClick;
                     this.entityRenderer.itemRenderer.resetEquippedProgress2();
@@ -770,5 +760,5 @@
                 this.resize(this.displayWidth, this.displayHeight);
             }
-            System.out.println(new StringBuilder().append("Size: ").append(this.displayWidth).append(", ").append(this.displayHeight).toString());
+            System.out.println("Size: " + this.displayWidth + ", " + this.displayHeight);
         }
         catch (Exception ex) {
@@ -788,5 +778,5 @@
         if (this.currentScreen != null) {
             final ScaledResolution scaledResolution = new ScaledResolution(width, height);
-            this.currentScreen.setWorldAndResolution(this, scaledResolution.getScaledWidth(), scaledResolution.getScaledHeight());
+            this.currentScreen.setWorldAndResolution(this, scaledResolution);
         }
     }
@@ -870,7 +860,4 @@
                 }
                 else {
-                    if (this.currentScreen == null) {
-                        continue;
-                    }
                     this.currentScreen.handleMouseInput();
                 }
@@ -905,4 +892,8 @@
                                 this.thePlayer.dropPlayerItemWithRandomChoice(this.thePlayer.inventory.decrStackSize(this.thePlayer.inventory.currentItem, 1), false);
                             }
+                            if (InputHandler.GetKBEventKey() == this.gameSettings.keyBindHideGUI.keyCode && this.ingameGUI != null
+                                    && this.currentScreen == null && this.thePlayer != null) {
+                                this.ingameGUI.showGUI = !this.ingameGUI.showGUI;
+                            }
                             if (this.isMultiplayerWorld() && InputHandler.GetKBEventKey() == this.gameSettings.keyBindChat.keyCode) {
                                 this.displayGuiScreen(new GuiChat());
@@ -1003,7 +994,5 @@
             else if (this.thePlayer != null) {
                 this.thePlayer.preparePlayerToSpawn();
-                if (world != null) {
-                    world.spawnEntityInWorld(this.thePlayer);
-                }
+                world.spawnEntityInWorld(this.thePlayer);
             }
             if (!world.multiplayerWorld) {
@@ -1032,4 +1021,5 @@
         System.gc();
         this.systemTime = 0L;
+        DiscordRPCManager.updatePresence(true);
     }
     
@@ -1051,8 +1041,8 @@
                 this.loadingScreen.setLoadingProgress(n2++ * 100 / n3);
                 this.theWorld.getBlockID(spawnX + i, 64, spawnZ + j);
-                while (this.theWorld.updatingLighting()) {}
             }
         }
         this.loadingScreen.displayLoadingString("Simulating world for a bit");
+        while (this.theWorld.updatingLighting()) doNothing();
         n3 = 2000;
         this.theWorld.dropOldChunks();
@@ -1093,5 +1083,5 @@
     
     public String debugLoadedEntities() {
-        return new StringBuilder("P: ").append(this.effectRenderer.getStatistics()).append(". T: ").append(this.theWorld.getDebugLoadedEntities()).toString();
+        return "P: §5" + this.effectRenderer.getStatistics() + "§f. T: " + this.theWorld.getDebugLoadedEntities();
     }
     
@@ -1114,5 +1104,5 @@
     
     public static boolean isValidName(final String username) {
-        return username.matches("[a-zA-Z0-9_ \\u0107 \\u015b]*");
+        return username.matches("[a-zA-Z\\d_ \\u0107\\u015b]*");
     }
     
@@ -1124,19 +1114,19 @@
         final Frame frame = new Frame("Minecraft");
         final Canvas canvas = new Canvas();
-        frame.setLayout((LayoutManager)new BorderLayout());
-        frame.add((Component)canvas, "Center");
+        frame.setLayout(new BorderLayout());
+        frame.add(canvas, "Center");
         canvas.setPreferredSize(new Dimension(854, 480));
         frame.pack();
-        frame.setLocationRelativeTo((Component)null);
-        final MinecraftImpl minecraft = new MinecraftImpl((Component)frame, canvas, null, 854, 480, false, frame);
-        final Thread thread = new Thread((Runnable)minecraft, "Minecraft main thread");
+        frame.setLocationRelativeTo(null);
+        final MinecraftImpl minecraft = new MinecraftImpl(frame, canvas, null, 854, 480, false, frame);
+        final Thread thread = new Thread(minecraft, "Minecraft main thread");
         thread.setPriority(10);
         minecraft.appletMode = false;
         minecraft.minecraftUri = "www.minecraft.net";
-        if (username != null && sessionID != null) {
+        if (sessionID != null) {
             minecraft.session = new Session(username, sessionID);
         }
         else {
-            minecraft.session = new Session(new StringBuilder().append("Player").append(System.currentTimeMillis() % 1000L).toString(), "");
+            minecraft.session = new Session("Player" + System.currentTimeMillis() % 1000L, "");
         }
         if (server != null) {
@@ -1145,10 +1135,10 @@
         }
         frame.setVisible(true);
-        frame.addWindowListener((WindowListener)new GameWindowListener(minecraft, thread));
+        frame.addWindowListener(new GameWindowListener(minecraft, thread));
         thread.start();
     }
     
     public static void main(final String[] args) {
-        String string = new StringBuilder().append("Player").append(System.currentTimeMillis() % 1000L).toString();
+        String string = "Player" + System.currentTimeMillis() % 1000L;
         if (args.length > 0) {
             string = args[0];
@@ -1160,3 +1150,8 @@
         startMainThread(string, sessionID);
     }
+
+    /**
+     * IDEA shut up please
+     */
+    private void doNothing() {}
 }
