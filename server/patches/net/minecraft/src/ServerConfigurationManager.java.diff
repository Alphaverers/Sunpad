--- ServerConfigurationManager.java
+++ ServerConfigurationManager.java
@@ -1,5 +1,4 @@
 package net.minecraft.src;
 
-import java.util.Iterator;
 import java.io.Writer;
 import java.io.PrintWriter;
@@ -19,5 +18,5 @@
 public class ServerConfigurationManager {
     public static Logger logger;
-    public List playerEntities;
+    public List<EntityPlayerMP> playerEntities;
     private MinecraftServer mcServer;
     private PlayerManager playerManagerObj;
@@ -27,8 +26,14 @@
     private Set<String> ops;
     private Set<String> authenticatedPlayers;
+    private Set<String> whitelistedPlayers;
+    private Set<String> whitelistedIPs;
+    private boolean whitelistEnabled;
+    private boolean enforceRosepad;
     private File bannedPlayersFile;
     private File ipBanFile;
     private File opFile;
     private File authFile;
+    private File whitelistFile;
+    private File whitelistIPsFile;
     private PlayerNBTManager playerNBTManagerObj;
     
@@ -38,9 +43,12 @@
     
     public ServerConfigurationManager(final MinecraftServer minecraftServer) {
-        this.playerEntities = (List)new ArrayList();
-        this.bannedPlayers = (Set<String>)new HashSet();
-        this.bannedIPs = (Set<String>)new HashSet();
-        this.ops = (Set<String>)new HashSet();
-        this.authenticatedPlayers = (Set<String>)new HashSet();
+        this.playerEntities = new ArrayList<>();
+        this.bannedPlayers = new HashSet<>();
+        this.bannedIPs = new HashSet<>();
+        this.ops = new HashSet<>();
+        this.authenticatedPlayers = new HashSet<>();
+        this.whitelistedPlayers = new HashSet<>();
+        this.whitelistedIPs = new HashSet<>();
+        this.whitelistEnabled = false;
         this.mcServer = minecraftServer;
         this.bannedPlayersFile = minecraftServer.getFile("banned-players.txt");
@@ -48,14 +56,22 @@
         this.opFile = minecraftServer.getFile("ops.txt");
         this.authFile = minecraftServer.getFile("authed-players.txt");
+        this.whitelistFile = minecraftServer.getFile("whitelist.txt");
+        this.whitelistIPsFile = minecraftServer.getFile("whitelist-ips.txt");
         this.playerManagerObj = new PlayerManager(minecraftServer);
         this.maxPlayers = minecraftServer.propertyManagerObj.getIntProperty("max-players", 20);
+        this.whitelistEnabled = minecraftServer.propertyManagerObj.getBooleanProperty("whitelist", false);
+        this.enforceRosepad = minecraftServer.propertyManagerObj.getBooleanProperty("enforce-rosepad", true);
         this.readBannedPlayers();
         this.loadBannedList();
         this.loadOps();
         this.loadAuthedPlayers();
+        this.loadWhitelistedPlayers();
+        this.loadWhitelistedIPs();
         this.writeBannedPlayers();
         this.saveBannedList();
         this.saveOps();
         this.saveAuthedPlayers();
+        this.saveWhitelistedPlayers();
+        this.saveWhitelistedIPs();
     }
     
@@ -91,5 +107,5 @@
     
     private static boolean isValidName(final String username) {
-        return username.matches("[a-zA-Z0-9_ \\u0107 \\u015b]*");
+        return username.matches("[a-zA-Z\\d_ \\u0107 \\u015b]{2,32}");
     }
     
@@ -99,11 +115,19 @@
             return null;
         }
-        String string4 = netLoginHandler1.netManager.getRemoteAddress().toString();
-        string4 = string4.substring(string4.indexOf("/") + 1);
-        string4 = string4.substring(0, string4.indexOf(":"));
-        if (this.bannedIPs.contains(string4)) {
+        if (!this.whitelistedPlayers.contains(username.trim().toLowerCase()) && this.whitelistEnabled) {
+        	netLoginHandler1.kickUser("You are not whitelisted on this server!");
+        	return null;
+        }
+        String ip = netLoginHandler1.netManager.getRemoteAddress().toString();
+        ip = ip.substring(ip.indexOf("/") + 1);
+        ip = ip.substring(0, ip.indexOf(":"));
+        if (this.bannedIPs.contains(ip)) {
             netLoginHandler1.kickUser("Your IP address is banned from this server!");
             return null;
         }
+        if (!this.whitelistedIPs.contains(ip.trim().toLowerCase()) && this.whitelistedIPs.size() > 0 && this.whitelistEnabled) {
+        	netLoginHandler1.kickUser("You are not whitelisted on this server!");
+        	return null;
+        }
         if (this.playerEntities.size() >= this.maxPlayers) {
             netLoginHandler1.kickUser("The server is full!");
@@ -114,10 +138,28 @@
             return null;
         }
+        {
+            List<ULPPExtension> extList = ULPPManager.getProtocolExtensions(password);
+            ULPPExtension ext = null;
+            for (ULPPExtension ext1 : extList) {
+                if (ext1.getName().equals("ROSE")) {
+                    ext = ext1;
+                }
+            }
+            if ((ext == null || ext.getVersion() == 0) && this.enforceRosepad) {
+                netLoginHandler1.kickUser("This server requires client to support scripts");
+                return null;
+            }
+            else if (ext != null && ext.getVersion() != 2 && this.enforceRosepad) {
+                netLoginHandler1.kickUser("This server requires Rosepad "
+                        + MinecraftServer.INSTANCE.getVersionString() + " to join");
+                return null;
+            }
+        }
         if (!authed && this.isAuthed(username)) {
-            netLoginHandler1.kickUser("This user is authenticated! Log in using LPUJ >=v1.0.6 to authenticate.");
+            netLoginHandler1.kickUser("This user is authenticated! Log in using Rosepad >=1.1.0.6-beta to authenticate.");
             return null;
         }
         for (int i5 = 0; i5 < this.playerEntities.size(); ++i5) {
-            final EntityPlayerMP entityPlayerMP6 = (EntityPlayerMP)this.playerEntities.get(i5);
+            final EntityPlayerMP entityPlayerMP6 = this.playerEntities.get(i5);
             if (entityPlayerMP6.username.equals(username)) {
                 if (!this.mcServer.ULPPOnlineMode) {
@@ -131,4 +173,5 @@
             this.authPlayer(username);
         }
+        netLoginHandler1.netManager.addToSendQueue(new Packet130RosepadMeta().Default());
         return new EntityPlayerMP(this.mcServer, this.mcServer.worldMngr, username, new ItemInWorldManager(this.mcServer.worldMngr));
     }
@@ -144,5 +187,5 @@
     public void sendPacketToAllPlayers(final Packet packet1) {
         for (int i2 = 0; i2 < this.playerEntities.size(); ++i2) {
-            final EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP)this.playerEntities.get(i2);
+            final EntityPlayerMP entityPlayerMP3 = this.playerEntities.get(i2);
             entityPlayerMP3.playerNetServerHandler.sendPacket(packet1);
         }
@@ -150,12 +193,12 @@
     
     public String getPlayerList() {
-        String string1 = "";
+        StringBuilder string1 = new StringBuilder();
         for (int i2 = 0; i2 < this.playerEntities.size(); ++i2) {
             if (i2 > 0) {
-                string1 = String.valueOf(string1) + ", ";
+                string1.append(", ");
             }
-            string1 = String.valueOf(string1) + ((EntityPlayerMP)this.playerEntities.get(i2)).username;
+            string1.append(this.playerEntities.get(i2).username);
         }
-        return string1;
+        return string1.toString();
     }
     
@@ -173,5 +216,5 @@
         try {
             this.bannedPlayers.clear();
-            final BufferedReader bufferedReader1 = new BufferedReader((Reader)new FileReader(this.bannedPlayersFile));
+            BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.bannedPlayersFile));
             String string2 = "";
             while ((string2 = bufferedReader1.readLine()) != null) {
@@ -181,5 +224,5 @@
         }
         catch (Exception exception3) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load ban list: ").append(exception3).toString());
+            ServerConfigurationManager.logger.warning("Failed to load ban list: " + exception3);
         }
     }
@@ -187,5 +230,5 @@
     private void writeBannedPlayers() {
         try {
-            final PrintWriter printWriter1 = new PrintWriter((Writer)new FileWriter(this.bannedPlayersFile, false));
+            final PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.bannedPlayersFile, false));
             for (final String string3 : this.bannedPlayers) {
                 printWriter1.println(string3);
@@ -194,8 +237,92 @@
         }
         catch (Exception exception4) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save ban list: ").append(exception4).toString());
+            ServerConfigurationManager.logger.warning("Failed to save ban list: " + exception4);
         }
     }
     
+    private void loadWhitelistedPlayers() {
+    	try {
+    		this.whitelistedPlayers.clear();
+    		final BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.whitelistFile));
+    		String string2 = "";
+    		while ((string2 = bufferedReader1.readLine()) != null) {
+    			this.whitelistedPlayers.add(string2.trim().toLowerCase());
+    		}
+    		bufferedReader1.close();
+    	}
+    	catch (Exception exception3) {
+    		ServerConfigurationManager.logger.warning("Failed to load player whitelist: " + exception3);
+    	}
+    }
+    
+    private void saveWhitelistedPlayers() {
+    	try {
+    		final PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.whitelistFile, false));
+    		for (final String string3 : this.whitelistedPlayers) {
+    			printWriter1.println(string3);
+    		}
+    		printWriter1.close();
+    	}
+    	catch (Exception exception4) {
+    		ServerConfigurationManager.logger.warning("Failed to save player whitelist: " + exception4);
+    	}
+    }
+    
+    public void whitelistPlayer(final String string1) {
+    	this.whitelistedPlayers.add(string1.toLowerCase());
+    	this.saveWhitelistedPlayers();
+    }
+    
+    public void unwhitelistPlayer(final String string1) {
+    	this.whitelistedPlayers.remove(string1.toLowerCase());
+    	this.saveWhitelistedPlayers();
+    }
+    
+    private void loadWhitelistedIPs() {
+    	try {
+    		this.whitelistedIPs.clear();
+    		final BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.whitelistIPsFile));
+    		String string2 = "";
+    		while ((string2 = bufferedReader1.readLine()) != null) {
+    			this.whitelistedIPs.add(string2.trim().toLowerCase());
+    		}
+    		bufferedReader1.close();
+    	}
+    	catch (Exception exception3) {
+    		ServerConfigurationManager.logger.warning("Failed to load ip whitelist: " + exception3);
+    	}
+    }
+    
+    private void saveWhitelistedIPs() {
+    	try {
+    		final PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.whitelistIPsFile, false));
+    		for (final String string3 : this.whitelistedIPs) {
+    			printWriter1.println(string3);
+    		}
+    		printWriter1.close();
+    	}
+    	catch (Exception exception4) {
+    		ServerConfigurationManager.logger.warning("Failed to save ip whitelist: " + exception4);
+    	}
+    }
+    
+    public void whitelistIP(final String string1) {
+    	this.whitelistedIPs.add(string1.toLowerCase());
+    	this.saveWhitelistedIPs();
+    }
+    
+    public void unwhitelistIP(final String string1) {
+    	this.whitelistedIPs.remove(string1.toLowerCase());
+    	this.saveWhitelistedIPs();
+    }
+    
+    public void enableWhitelist() {
+    	this.whitelistEnabled = true;
+    }
+    
+    public void disableWhitelist() {
+    	this.whitelistEnabled = false;
+    }
+    
     public void banIP(final String string1) {
         this.bannedIPs.add(string1);
@@ -219,5 +346,5 @@
         }
         catch (Exception exception3) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load ip ban list: ").append(exception3).toString());
+            ServerConfigurationManager.logger.warning("Failed to load ip ban list: " + exception3);
         }
     }
@@ -232,5 +359,5 @@
         }
         catch (Exception exception4) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save ip ban list: ").append(exception4).toString());
+            ServerConfigurationManager.logger.warning("Failed to save ip ban list: " + exception4);
         }
     }
@@ -266,5 +393,5 @@
         }
         catch (Exception exception3) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load op list: ").append(exception3).toString());
+            ServerConfigurationManager.logger.warning("Failed to load op list: " + exception3);
         }
     }
@@ -279,5 +406,5 @@
         }
         catch (Exception exception4) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save op list: ").append(exception4).toString());
+            ServerConfigurationManager.logger.warning("Failed to save op list: " + exception4);
         }
     }
@@ -294,5 +421,5 @@
         }
         catch (Exception exception3) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load authenticated player list: ").append(exception3).toString());
+            ServerConfigurationManager.logger.warning("Failed to load authenticated player list: " + exception3);
         }
     }
@@ -307,5 +434,5 @@
         }
         catch (Exception exception4) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save authenticated player list: ").append(exception4).toString());
+            ServerConfigurationManager.logger.warning("Failed to save authenticated player list: " + exception4);
         }
     }
